// debounce@2.2.0 downloaded from https://ga.jspm.io/npm:debounce@2.2.0/index.js

var e=typeof globalThis!=="undefined"?globalThis:typeof self!=="undefined"?self:global;var t={};function debounce(t,o=100,n={}){if(typeof t!=="function")throw new TypeError(`Expected the first parameter to be a function, got \`${typeof t}\`.`);if(o<0)throw new RangeError("`wait` must not be negative.");const{immediate:r}=typeof n==="boolean"?{immediate:n}:n;let i;let a;let c;let f;let u;function run(){const e=i;const o=a;i=void 0;a=void 0;u=t.apply(e,o);return u}function later(){const e=Date.now()-f;if(e<o&&e>=0)c=setTimeout(later,o-e);else{c=void 0;r||(u=run())}}const debounced=function(...t){if(i&&(this||e)!==i&&Object.getPrototypeOf(this||e)===Object.getPrototypeOf(i))throw new Error("Debounced method called with different contexts of the same prototype.");i=this||e;a=t;f=Date.now();const n=r&&!c;c||(c=setTimeout(later,o));n&&(u=run());return u};Object.defineProperty(debounced,"isPending",{get(){return c!==void 0}});debounced.clear=()=>{if(c){clearTimeout(c);c=void 0}};debounced.flush=()=>{c&&debounced.trigger()};debounced.trigger=()=>{u=run();debounced.clear()};return debounced}t.debounce=debounce;t=debounce;var o=t;const n=t.debounce;export{n as debounce,o as default};

