version: 2.1

orbs:
  aws-cli: circleci/aws-cli@2.0.3
  ruby: circleci/ruby@1
  node: circleci/node@4.7.0
  browser-tools: circleci/browser-tools@1.1
  cloudfoundry: circleci/cloudfoundry@1.0
  slack: circleci/slack@4.3.0
  queue: eddiewebb/queue@1.6.4
  tariff: trade-tariff/trade-tariff-ci-orb@0 # can also change to @dev:<gitsha> for specific version or @dev:alpha to test dev branches

commands:
  cf_deploy_docker:
    parameters:
      docker_image_tag:
        type: string
      space:
        type: string
      environment_key:
        type: string
      app_domain_prefix:
        type: string
    steps:
      - checkout
      - tariff/cf-install:
          space: << parameters.space >>
      - run:
          name: "Fetch existing manifest"
          command: |
            cf create-app-manifest "$CF_APP-<< parameters.environment_key >>" -p deploy_manifest.yml
      - run:
          name: "Push new app in dark mode"
          command: |
            export DOCKER_IMAGE=tariff-frontend
            export DOCKER_TAG="<< parameters.docker_image_tag >>"

            # Push as "dark" instance
            CF_DOCKER_PASSWORD=$AWS_SECRET_ACCESS_KEY cf push "$CF_APP-<< parameters.environment_key >>-dark" -f deploy_manifest.yml --no-route --docker-image "$ECR_REPO/$DOCKER_IMAGE:$DOCKER_TAG" --docker-username "$AWS_ACCESS_KEY_ID"
            # Map dark route
            cf map-route  "$CF_APP-<< parameters.environment_key >>-dark" london.cloudapps.digital -n "$CF_APP-<< parameters.environment_key >>-dark"
            # Enable routing from this service to the backend applications which are private
            cf add-network-policy "$CF_APP-<< parameters.environment_key >>-dark" "$CF_BACKEND_APP_XI-<< parameters.environment_key >>" --protocol tcp --port 8080
            cf add-network-policy "$CF_APP-<< parameters.environment_key >>-dark" "$CF_BACKEND_APP_UK-<< parameters.environment_key >>" --protocol tcp --port 8080
      - run:
          name: "Verify new version is working on dark URL."
          command: |
            sleep 15
            # Verify new version is working on dark URL.
            HTTPCODE=`curl -s -o /dev/null -w "%{http_code}" https://$CF_APP-<< parameters.environment_key >>-dark.london.cloudapps.digital/healthcheck`

            if [ "$HTTPCODE" -ne 200 ];then
              echo "dark route not available, failing deploy ($HTTPCODE)"
              cf logs "$CF_APP-<< parameters.environment_key >>-dark" --recent
              cf delete -f  "$CF_APP-<< parameters.environment_key >>-dark"
              exit 1
            fi
      - run:
          name: "Switch dark app to live"
          command: |
            # Send "real" url to new version
            cf unmap-route "$CF_APP-<< parameters.environment_key >>-dark" london.cloudapps.digital -n "$CF_APP-<< parameters.environment_key >>-dark"

            # Start sending traffic to new version
            cf map-route  "$CF_APP-<< parameters.environment_key >>-dark" london.cloudapps.digital -n "$CF_APP-<< parameters.environment_key >>"
            # TODO: Update when we remove referring service from the path
            cf map-route  "$CF_APP-<< parameters.environment_key >>-dark" "<< parameters.app_domain_prefix >>".trade-tariff.service.gov.uk

            # Stop sending traffic to previous version
            cf unmap-route  "$CF_APP-<< parameters.environment_key >>" london.cloudapps.digital -n "$CF_APP-<< parameters.environment_key >>"
            cf unmap-route  "$CF_APP-<< parameters.environment_key >>" "<< parameters.app_domain_prefix >>".trade-tariff.service.gov.uk

            # stop previous version
            cf stop "$CF_APP-<< parameters.environment_key >>"

            # delete previous version
            cf delete "$CF_APP-<< parameters.environment_key >>" -f

            # Switch name of "dark" version to claim correct name
            cf rename "$CF_APP-<< parameters.environment_key >>-dark" "$CF_APP-<< parameters.environment_key >>"
      - slack/notify:
          channel: deployments
          event: fail
          template: basic_fail_1
      - slack/notify:
          channel: deployments
          event: pass
          template: basic_success_1

  cf_deploy_review:
    steps:
      - tariff/cf-install:
          space: development
      - run:
          name: Fetch existing manifest
          command: |
            cf create-app-manifest "$CF_APP-dev" -p deploy_manifest.yml
      - run:
          name: Find PR number
          command: |
            PR_NUMBER=$(echo $CIRCLE_PULL_REQUEST | sed 's|https://github.com/||' | cut -d '/' -f 4)
            echo "export PR_NUMBER=${PR_NUMBER}" >> $BASH_ENV
            echo "export REVIEW_URL_ID='pr${PR_NUMBER}'" >> $BASH_ENV
      - run:
          name: Update app manifest
          command: |
            sed -i "s/instances: [0-9]\+/instances\: 1/" deploy_manifest.yml
            sed -i "s|CORS_HOST: dev\.trade-tariff\.service\.gov\.uk|CORS_HOST: ${CF_APP}-${REVIEW_URL_ID}.london.cloudapps.digital|" deploy_manifest.yml
            sed -i "s|HOST: dev\.trade-tariff\.service\.gov\.uk|HOST: ${CF_APP}-${REVIEW_URL_ID}.london.cloudapps.digital|" deploy_manifest.yml
      - run:
          name: Push review app
          command: |
            export DOCKER_IMAGE=tariff-frontend
            export DOCKER_TAG=dev-${CIRCLE_SHA1}

            CF_DOCKER_PASSWORD=$AWS_SECRET_ACCESS_KEY cf push "$CF_APP-${REVIEW_URL_ID}" \
              -f deploy_manifest.yml \
              --no-route \
              --docker-image "$ECR_REPO/$DOCKER_IMAGE:$DOCKER_TAG" \
              --docker-username "$AWS_ACCESS_KEY_ID"

            cf map-route "$CF_APP-$REVIEW_URL_ID" london.cloudapps.digital -n "$CF_APP-$REVIEW_URL_ID"

            # Enable routing from this service to the backend applications which are private
            cf add-network-policy "$CF_APP-$REVIEW_URL_ID" "$CF_BACKEND_APP_XI-dev" --protocol tcp --port 8080
            cf add-network-policy "$CF_APP-$REVIEW_URL_ID" "$CF_BACKEND_APP_UK-dev" --protocol tcp --port 8080
      - run:
          name: Find JIRA ticket number
          command: |
            REPO_API_URL=$(echo "${CIRCLE_REPOSITORY_URL}/" | sed 's|.git/$||' | sed 's|git@github.com:|https://api.github.com/repos/|')
            JIRA_TICKET=$(curl --silent --show-error "${REPO_API_URL}/pulls/${PR_NUMBER}" | jq -r '.body' | grep -oP 'HOTT-\d{4,5}' | head -1 || true)
            echo "FOUND ${JIRA_TICKET}"
            echo "export JIRA_TICKET=${JIRA_TICKET}" >> $BASH_ENV
      - run:
          name: Generate JIRA comment
          command: |
            APP_URL="https://${CF_APP}-pr${PR_NUMBER}.london.cloudapps.digital/"
            echo "{ \"body\":\"Pull Request ${PR_NUMBER}\n${CIRCLE_PULL_REQUEST}\n\nReview App\n${APP_URL}\" }" > jira_comment.json
      - run:
          name: Notify JIRA
          command: |
            if [[ $JIRA_TICKET != '' ]]
            then
              echo "NOTIFYING TICKET ${JIRA_TICKET}"

              curl \
                --request POST \
                --header "Content-Type: application/json" \
                --user "${JIRA_USERNAME}:${JIRA_TOKEN}" \
                --silent \
                --output /dev/null \
                --show-error \
                --fail \
                --data @jira_comment.json \
                https://transformuk.atlassian.net/rest/api/2/issue/${JIRA_TICKET}/comment
            fi
      - slack/notify:
          channel: deployments
          event: fail
          template: basic_fail_1
      - slack/notify:
          channel: deployments
          event: pass
          custom: |
            {
              "text": "Review App deployed for $CIRCLE_PROJECT_NAME",
              "blocks": [
                {
                  "type": "header",
                  "text": {
                    "type": "plain_text",
                    "text": "Review App deployed for PR ${PR_NUMBER}  :white_check_mark:",
                    "emoji": true
                  }
                },
                {
                  "type": "section",
                  "fields": [
                    {
                      "type": "mrkdwn",
                      "text": "*URL*: https://${CF_APP}-pr${PR_NUMBER}.london.cloudapps.digital/"
                    }
                  ]
                },
                {
                  "type": "section",
                  "fields": [
                    {
                      "type": "mrkdwn",
                      "text": "*Project*:\n $CIRCLE_PROJECT_REPONAME"
                    },
                    {
                      "type": "mrkdwn",
                      "text": "*Branch*:\n $CIRCLE_BRANCH"
                    },
                    {
                      "type": "mrkdwn",
                      "text": "*Commit*:\n $CIRCLE_SHA1"
                    },
                    {
                      "type": "mrkdwn",
                      "text": "*Author*:\n $CIRCLE_USERNAME"
                    }
                  ],
                  "accessory": {
                    "type": "image",
                    "image_url": "https://assets.brandfolder.com/otz5mn-bw4j2w-6jzqo8/original/circle-logo-badge-black.png",
                    "alt_text": "CircleCI logo"
                  }
                },
                {
                  "type": "actions",
                  "elements": [
                    {
                      "type": "button",
                      "text": {
                        "type": "plain_text",
                        "text": "View App"
                      },
                      "url": "https://${CF_APP}-pr${PR_NUMBER}.london.cloudapps.digital/"
                    }
                  ]
                }
              ]
            }

  cf_purge_reviews:
    steps:
      - tariff/cf-install:
          space: development
      - run:
          name: Find open PRs
          command: |
            DAYS=7
            REPO_API_URL=$(echo "${CIRCLE_REPOSITORY_URL}/" | sed 's|.git/$||' | sed 's|git@github.com:|https://api.github.com/repos/|')

            curl --fail --retry 3 --show-error "${REPO_API_URL}/pulls?state=open" | \
              jq ".[] | select((.updated_at | fromdate) > (now - $DAYS*24*60*60)) | .number" > open_prs.txt

            cat open_prs.txt | sed "s/^/${CF_APP}-pr/" | sort > expected_apps.txt
            cat expected_apps.txt
      - run:
          name: Find current review apps
          command: |
            (cf apps | cut -d ' ' -f 1  | grep "${CF_APP}-pr" | sort || true) > current_apps.txt
            cat current_apps.txt
      - run:
          name: Find orphaned review apps
          command: |
            (comm -1 --output-delimiter="|" <(cat expected_apps.txt) <(cat current_apps.txt) | egrep -v '^\|' || true) > orphaned_apps.txt
            cat orphaned_apps.txt
      - run:
          name: Remove orphaned review apps
          command: |
            for ORPHANED_APP in $(cat orphaned_apps.txt)
              do echo "Removing ${ORPHANED_APP}"
                cf delete "${ORPHANED_APP}" -r -f
              done

  smoketest:
    parameters:
      url:
        type: string
    steps:
      - run:
          name: "Checkout tests repo"
          command: git clone --depth=1 "https://github.com/trade-tariff/trade-tariff-testing/"
      - run:
          name: "Check environment being tested"
          environment:
            CYPRESS_BASE_URL: '<< parameters.url >>'
          command: 'echo "Testing: ${CYPRESS_BASE_URL}"'
      - restore_cache:
          keys:
            - v2-smoketest-deps-{{ checksum "trade-tariff-testing/yarn.lock" }}
      - run:
          name: "Install NPM packages"
          command: 'cd trade-tariff-testing && yarn install'
      - save_cache:
          key: v2-smoketest-deps-{{ checksum "trade-tariff-testing/yarn.lock" }}
          paths:
            - trade-tariff-testing/node_modules
            - /root/.cache/Cypress
      - run:
          name: "Cypress Smoke tests"
          environment:
            CYPRESS_BASE_URL: '<< parameters.url >>'
          command: 'cd trade-tariff-testing && yarn run cypress run --spec "/*/**/HOTT-Shared/devSmokeTestCI.spec.js"'

  sentry-release:
    steps:
      - checkout
      - run:
          name: Create release and notify Sentry of deploy
          command: |
            sudo curl -sL \
                      -o /usr/local/bin/sentry-cli \
                      https://github.com/getsentry/sentry-cli/releases/download/1.74.3/sentry-cli-Linux-x86_64
            sudo chmod 0755 /usr/local/bin/sentry-cli
            export SENTRY_RELEASE=$(sentry-cli releases propose-version)
            sentry-cli releases new -p $SENTRY_PROJECT $SENTRY_RELEASE
            sentry-cli releases set-commits $SENTRY_RELEASE --auto
            sentry-cli releases finalize $SENTRY_RELEASE
            sentry-cli releases deploys $SENTRY_RELEASE new -e $SENTRY_ENVIRONMENT

jobs:
  checks:
    docker:
      - image: 'cimg/ruby:3.1.2-node'
    resource_class: small
    steps:
      - checkout
      - ruby/install-deps
     #- ruby/rubocop-check:
     #   format: progress
     #   label: Inspecting with Rubocop
      - run:
          name: Rubocop changed files
          when: always
          command: bundle exec rubocop $(git diff --name-only --diff-filter=ACM $(git merge-base main HEAD)..HEAD | egrep '\.rb|\.rake') Gemfile
      - run:
          name: Inspecting with Brakeman
          when: always
          command: 'bundle exec brakeman -o /dev/stdout -o test-results/brakeman/brakeman.junit -o brakeman.html --no-progress --separate-models'
      - store_test_results:
          path: test-results/brakeman/
      - store_artifacts:
          path: brakeman.html

  build:
    environment:
      IMAGE_NAME: tariff-frontend
    parameters:
      dev-build:
        default: false
        type: boolean
    docker:
      - image: cimg/ruby:3.1.2-node
    steps:
      - checkout
      - setup_remote_docker:
          version: 20.10.11
          docker_layer_caching: false
      - aws-cli/install
      - run:
          name: "Set docker tag"
          command: |
            echo "export DOCKER_TAG=<<# parameters.dev-build >>dev-<</ parameters.dev-build >>${CIRCLE_SHA1}" >> $BASH_ENV
      - run:
          name: "Build Docker image"
          command: |
            export GIT_NEW_REVISION=$(git rev-parse --short HEAD)
            echo $GIT_NEW_REVISION >REVISION
            docker build -t $IMAGE_NAME:$DOCKER_TAG .
      - run:
          name: "Push image to ECR"
          command: |
            aws ecr get-login-password --region eu-west-2 | docker login --username AWS --password-stdin $ECR_REPO
            docker tag $IMAGE_NAME:$DOCKER_TAG $ECR_REPO/$IMAGE_NAME:$DOCKER_TAG
            docker push $ECR_REPO/$IMAGE_NAME:$DOCKER_TAG

  smoketest_dev:
    docker:
      - image: 'cypress/base:16.5.0'
    steps:
      - smoketest:
          url: https://dev.trade-tariff.service.gov.uk

  smoketest_staging:
    docker:
      - image: 'cypress/base:16.5.0'
    steps:
      - smoketest:
          url: https://staging.trade-tariff.service.gov.uk

  jest-tests:
    docker:
      - image: cimg/node:16.10.0
        environment:
          BUNDLE_JOBS: "3"
          BUNDLE_RETRY: "3"
          RAILS_ENV: test
    steps:
      - checkout
      - node/install-packages:
          pkg-manager: yarn
      - run:
          command: yarn run test
          name: Run YARN tests
  test:
    parallelism: 4
    docker:
      - image: cimg/ruby:3.1.2-node
        environment:
          BUNDLE_JOBS: "3"
          BUNDLE_RETRY: "3"
          RAILS_ENV: test
    resource_class: medium
    steps:
      - browser-tools/install-browser-tools
      - checkout
      - ruby/install-deps
      - node/install-packages:
          pkg-manager: yarn
      - ruby/rspec-test
      - store_artifacts:
          path: coverage
      - slack/notify:
          channel: deployments
          event: fail
          template: basic_fail_1

  deploy_dev:
    docker:
      - image: cimg/ruby:3.1.2
    environment:
      SENTRY_ENVIRONMENT: "development"
    steps:
      - queue/until_front_of_line:
          time: '10'
          consider-branch: false
          dont-quit: true
      - cf_deploy_docker:
          docker_image_tag: dev-$CIRCLE_SHA1
          space: "development"
          environment_key: "dev"
          app_domain_prefix: "dev"
      - sentry-release

  deploy_review:
    docker:
      - image: cimg/ruby:3.1.2
    environment:
      SENTRY_ENVIRONMENT: "development"
    steps:
      - queue/until_front_of_line:
          time: '10'
          consider-branch: true
          dont-quit: true
      - cf_deploy_review

  purge_reviews:
    docker:
      - image: cimg/ruby:3.1.2
    environment:
      SENTRY_ENVIRONMENT: "development"
    steps:
      - cf_purge_reviews

  deploy_main_to_staging:
    docker:
      - image: cimg/ruby:3.1.2-node
    environment:
      SENTRY_ENVIRONMENT: "staging"
    steps:
      - queue/until_front_of_line:
          time: '10'
          dont-quit: true
      - cf_deploy_docker:
          docker_image_tag: $CIRCLE_SHA1
          space: "staging"
          environment_key: "staging"
          app_domain_prefix: "staging"
      - sentry-release

  deploy_release_to_staging:
    docker:
      - image: cimg/ruby:3.1.2-node
    steps:
      - cf_deploy_docker:
          docker_image_tag: $CIRCLE_TAG
          space: staging
          environment_key: staging
          app_domain_prefix: staging

  deploy_production:
    docker:
      - image: cimg/ruby:3.1.2-node
    environment:
      SENTRY_ENVIRONMENT: "production"
    steps:
      - queue/until_front_of_line:
          time: '10'
          dont-quit: true
      - cf_deploy_docker:
          docker_image_tag: $CIRCLE_TAG
          space: "production"
          environment_key: "production"
          app_domain_prefix: "www"
      - sentry-release
      - tariff/notify-production-release:
          app-name: Frontend
          slack-channel: trade_tariff
          release-tag: $CIRCLE_TAG

workflows:
  version: 2
  ci:
    jobs:
      - purge_reviews:
          context: trade-tariff
          filters:
            branches:
              ignore:
                - /^dependabot\/.*/

      - checks:
          context: trade-tariff

      - jest-tests:
          context: trade-tariff
          filters:
            branches:
              ignore:
                - main

      - test:
          context: trade-tariff
          filters:
            branches:
              ignore:
                - main

      - build:
          name: build_dev
          context: trade-tariff
          dev-build: true
          filters:
            branches:
              ignore:
                - main
                - /^dependabot\/.*/

      - deploy_dev:
          context: trade-tariff
          requires:
            - jest-tests
            - test
            - build_dev
          filters:
            branches:
              ignore:
                - /^dependabot\/.*/

      - deploy_review:
          context: trade-tariff
          requires:
            - jest-tests
            - test
            - build_dev
          filters:
            branches:
              ignore:
                - /^dependabot\/.*/

      - smoketest_dev:
          name: smoketest_dev
          context: trade-tariff
          filters:
            branches:
              ignore:
                - main
                - /^dependabot\/.*/
          requires:
            - deploy_dev

      - build:
          name: build_live
          context: trade-tariff
          filters:
            branches:
              only:
                - main

      - deploy_main_to_staging:
          context: trade-tariff
          filters:
            branches:
              only:
                - main
          requires:
            - build_live

      - smoketest_staging:
          filters:
            branches:
              only:
                - main
          requires:
            - deploy_main_to_staging

      - hold_create_release:
          type: approval
          filters:
            branches:
              only:
                - main
          requires:
            - deploy_main_to_staging

      - tariff/create-production-release:
          context: trade-tariff
          image-name: tariff-frontend
          filters:
            branches:
              only:
                - main
          requires:
            - hold_create_release

      - deploy_release_to_staging:
          context: trade-tariff
          filters:
            tags:
              only: /^release-202[\d-]+/
            branches:
              ignore: /.*/

      - hold_deploy_production:
          type: approval
          filters:
            tags:
              only: /^release-202[\d-]+/
            branches:
              ignore: /.*/

      - deploy_production:
          context: trade-tariff
          filters:
            tags:
              only: /^release-202[\d-]+/
            branches:
              ignore: /.*/
          requires:
            - hold_deploy_production

# TODO: Discuss production deployment strategy.
